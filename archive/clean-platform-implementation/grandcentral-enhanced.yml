# Grand Central Configuration - Enhanced with Platform Capabilities
# This file configures the deployment of the platform services through Grand Central
# with comprehensive integration of all platform capabilities

project_name: clean-platform
team_name: platform-team
slack_channel: "#platform-support"
deploy_mechanism: kubernetes

# Docker build configuration
docker_build:
  build_args:
    BASE_IMAGE: cf-registry.nr-ops.net/newrelic/infrastructure-k8s-fips:1.33.2
    # JVM optimization for Java services
    JAVA_VERSION: 21
    ENABLE_FIPS: true
  registry: cf-registry.nr-ops.net
  cache: true

# New Relic monitoring
new_relic:
  app_name: clean-platform
  license_key_secret: newrelic-license-key

# Entity Platform Integration
entity_synthesis:
  domain: PLATFORM
  type: CLEAN_PLATFORM_SERVICE
  rules:
    - identifier: "service_name"
      name: "service_name"
      encodeIdentifierInGUID: true
      conditions:
        - attribute: "eventType"
          value: "CleanPlatformMetric"
  configuration:
    entityExpirationTime: EIGHT_DAYS
    alertable: true

# Change management integration
change_management:
  enabled: true
  types:
    - deployment
    - configuration
    - emergency
  auto_create: true
  require_approval:
    production: true
    staging: false

# Base environment configuration
base_environment:
  deployment_hooks:
    pre_deploy:
      - name: suppress-alerts
        script: scripts/deployment-hooks/suppress-alerts.sh
      - name: backup-check
        script: scripts/deployment-hooks/backup-check.sh
      - name: create-change-request
        type: change_management
        params:
          auto_approve: false
          require_approval_from: "team-lead"
          description: "Deploying ${GRAND_CENTRAL_PROJECT} version ${GRAND_CENTRAL_VERSION}"
    
    post_deploy:
      - name: health-check
        script: scripts/deployment-hooks/health-check.sh
      - name: smoke-tests
        script: scripts/deployment-hooks/smoke-tests.sh
      - name: update-change-status
        type: change_management
        params:
          status: "completed"
          create_marker: true
      - name: alert-suppression-cleanup
        type: alert_suppression
        params:
          action: "restore"
    
    on_failure:
      - name: rollback
        script: scripts/deployment-hooks/rollback.sh
      - name: notify-team
        script: scripts/deployment-hooks/notify-failure.sh
      - name: update-change-failure
        type: change_management
        params:
          status: "failed"
          auto_rollback: true

  env_vars:
    # Application configuration
    APP_NAME: "clean-platform"
    
    # Kafka configuration
    KAFKA_BROKERS: "secret_key_ref:kpt-kafka-client-config:BOOTSTRAP_BROKERS_DEFAULT"
    KAFKA_SECURITY_PROTOCOL: "secret_key_ref:kpt-kafka-client-config:SECURITY_PROTOCOL_DEFAULT"
    KAFKA_PRODUCER_ACKS: "1"
    KAFKA_PRODUCER_LINGER_MS: "100"
    KAFKA_PRODUCER_COMPRESSION_TYPE: "lz4"
    KAFKA_PRODUCER_BATCH_SIZE: "65536"
    KAFKA_CONSUMER_FETCH_MIN_BYTES: "65536"
    KAFKA_CONSUMER_GROUP: "clean-platform-${GRAND_CENTRAL_ENVIRONMENT}"
    
    # Feature flags
    FEATURE_FLAGS_ENABLED: "true"
    FEATURE_FLAGS_SERVICE_URL: "http://feature-flags-service.${GRAND_CENTRAL_ENVIRONMENT}.svc.cluster.local:8080"
    
    # Rate limiting
    RATE_LIMITING_ENABLED: "true"
    RATE_LIMITING_SERVICE_URL: "http://rate-limiting-platform.shared.svc.cluster.local:8080"
    
    # Service discovery (Biosecurity)
    BIOSECURITY_ENABLED: "true"
    BIOSECURITY_DISCOVERY_PATH: "terraform/platform-team/${GRAND_CENTRAL_ENVIRONMENT}/${GRAND_CENTRAL_CELL}/clean-platform"
    
    # Performance tuning
    WORKER_THREADS: "7"
    BATCH_SIZE: "1000"
    
    # JVM optimization (for Java services)
    JAVA_OPTS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"

# Environment configurations
environments:
  - name: development
    kubernetes:
      namespace: clean-platform-dev
      cell_assignment: staging
      cell_selector:
        matchLabels:
          environment: "us-staging"
          workload.interlinked.newrelic.com/general-purpose: ""
      
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 200m
      
      # Cost optimization for dev
      node_selector:
        karpenter.sh/capacity-type: "spot"
      
      tolerations:
        - key: "karpenter.sh/spot"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
    
    instances: 1
    autoscaling:
      enabled: false
    
    env_vars:
      LOG_LEVEL: debug
      ENVIRONMENT: development
    
    secret_env_vars:
      - name: DATABASE_PASSWORD
        vault_name: db-password
      - name: API_KEY

  - name: staging
    kubernetes:
      namespace: clean-platform-staging
      cell_assignment: staging
      cell_selector:
        matchLabels:
          environment: "us-staging"
          workload.interlinked.newrelic.com/general-purpose: ""
      
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 500m
      
      # IngressDomain configuration
      ingress_domain:
        domain: "clean-platform-staging.nr-ops.net"
        path_prefix: "/"
        priority: 100
        authentication:
          type: "oauth2"
          provider: "okta"
        circuit_breaker:
          enabled: true
          threshold: 50
          timeout: 30
    
    instances: 2
    autoscaling:
      enabled: true
      min_replicas: 2
      max_replicas: 6
      metrics:
        - type: cpu
          target_percentage: 70
        - type: memory
          target_percentage: 80
        - type: kafka_consumer_lag
          target_value: 1000
          kafka_topic: "clean-platform-events"
      behavior:
        scale_down:
          stabilization_window_seconds: 300
          policies:
            - type: Percent
              value: 10
              period_seconds: 60
        scale_up:
          stabilization_window_seconds: 60
          policies:
            - type: Percent
              value: 100
              period_seconds: 30
    
    health_checks:
      liveness_probe:
        http_get:
          path: /healthz
          port: 8081
        initial_delay_seconds: 30
        period_seconds: 10
      readiness_probe:
        http_get:
          path: /readyz
          port: 8081
        initial_delay_seconds: 5
        period_seconds: 5
    
    # Kafka configuration for staging
    kafka:
      consumer_group: "clean-platform-staging"
      topics:
        - name: "platform-events-staging"
          partitions: 3
        - name: "platform-metrics-staging"
          partitions: 3
    
    env_vars:
      LOG_LEVEL: info
      ENVIRONMENT: staging
    
    secret_env_vars:
      - name: DATABASE_PASSWORD
        vault_name: db-password
      - name: API_KEY
      - name: REDIS_PASSWORD

  - name: production
    kubernetes:
      namespace: clean-platform
      cell_assignment: production
      cells:
        - name: us-core-ops
          cell_selector:
            matchLabels:
              environment: "us-production"
              workload.interlinked.newrelic.com/general-purpose: ""
          primary: true
          capacity_percentage: 60
        
        - name: us-alt-mule
          cell_selector:
            matchLabels:
              environment: "us-alt-production"
              workload.interlinked.newrelic.com/general-purpose: ""
          primary: false
          capacity_percentage: 40
          failover_priority: 2
      
      # Production cell routing
      cell_routing:
        routing_type: "PLATFORM_SERVICE"
        capacity_thresholds:
          request_rate: 7000
          cpu_utilization: 0.7
          memory_utilization: 0.8
      
      resources:
        requests:
          memory: 1Gi
          cpu: 500m
        limits:
          memory: 2Gi
          cpu: 1000m
      
      # Cost optimization for production
      cost_optimization:
        instance_family: "graviton"
        spot_eligible: false  # Production uses on-demand
        reserved_instances: true
      
      # IngressDomain configuration for production
      ingress_domain:
        - domain: "clean-platform.nr-ops.net"
          path_prefix: "/"
          priority: 100
          authentication:
            type: "oauth2"
            provider: "okta"
          circuit_breaker:
            enabled: true
            threshold: 50
            timeout: 30
          rate_limit:
            enabled: true
            requests_per_second: 1000
        
        - domain: "api.clean-platform.nr-ops.net"
          path_prefix: "/api"
          priority: 90
          authentication:
            type: "api_key"
          rate_limit:
            enabled: true
            requests_per_second: 5000
    
    instances: 3
    autoscaling:
      enabled: true
      min_replicas: 3
      max_replicas: 50
      metrics:
        - type: cpu
          target_percentage: 60
        - type: memory
          target_percentage: 70
        - type: kafka_consumer_lag
          target_value: 1000
          kafka_topic: "clean-platform-events"
        - type: external
          metric:
            name: "clean_platform_queue_depth"
            selector:
              matchLabels:
                queue: "data_queue"
          target_value: 5000
      
      behavior:
        scale_down:
          stabilization_window_seconds: 300
          policies:
            - type: Percent
              value: 10
              period_seconds: 60
            - type: Pods
              value: 2
              period_seconds: 60
        scale_up:
          stabilization_window_seconds: 60
          policies:
            - type: Percent
              value: 100
              period_seconds: 30
            - type: Pods
              value: 4
              period_seconds: 60
    
    # Production Kafka configuration
    kafka:
      consumer_group: "clean-platform-prod"
      topics:
        - name: "platform-events"
          partitions: 12
        - name: "platform-metrics"
          partitions: 6
      performance:
        max_poll_records: 500
        max_poll_interval_ms: 300000
        session_timeout_ms: 30000
    
    health_checks:
      liveness_probe:
        http_get:
          path: /healthz
          port: 8081
        initial_delay_seconds: 30
        period_seconds: 10
        failure_threshold: 3
      readiness_probe:
        http_get:
          path: /readyz
          port: 8081
        initial_delay_seconds: 5
        period_seconds: 5
        success_threshold: 1
        failure_threshold: 3
    
    pod_disruption_budget:
      min_available: 2
    
    env_vars:
      LOG_LEVEL: info
      ENVIRONMENT: production
    
    secret_env_vars:
      - name: DATABASE_PASSWORD
        vault_name: db-password
      - name: API_KEY
      - name: REDIS_PASSWORD
      - name: ENCRYPTION_KEY
    
    deployment_windows:
      - start: "09:00"
        end: "17:00"
        timezone: "America/New_York"
        days: ["monday", "tuesday", "wednesday", "thursday", "friday"]

# Service registration for discovery
service_registration:
  enabled: true
  endpoints:
    - name: api
      port: 8080
      protocol: http
    - name: metrics
      port: 9090
      protocol: http

# Alert suppression during deployments
alert_suppression:
  enabled: true
  duration_minutes: 30
  types:
    - deployment
    - maintenance
    - incident

# Service Level Objectives (SLOs)
slo:
  - name: "availability"
    query: |
      SELECT percentage(count(*), WHERE response.status < 500)
      FROM Transaction
      WHERE appName = 'clean-platform-${GRAND_CENTRAL_ENVIRONMENT}'
    target: 99.95
    window: "7d"
  
  - name: "latency_p99"
    query: |
      SELECT percentile(duration, 99)
      FROM Transaction
      WHERE appName = 'clean-platform-${GRAND_CENTRAL_ENVIRONMENT}'
    target: 100  # milliseconds
    window: "7d"
  
  - name: "error_rate"
    query: |
      SELECT percentage(count(*), WHERE error IS true)
      FROM Transaction
      WHERE appName = 'clean-platform-${GRAND_CENTRAL_ENVIRONMENT}'
    target: 0.1  # percent
    window: "7d"

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
  
  # Capacity monitoring
  capacity_alerts:
    - name: "cpu_headroom"
      query: "100 - average(cpuCoresUtilization)"
      threshold: 30  # Alert when less than 30% headroom
    
    - name: "memory_headroom"
      query: "100 - average(memoryUtilization)"
      threshold: 25  # Alert when less than 25% headroom
    
    - name: "kafka_lag"
      query: "max(kafka.consumer.lag)"
      threshold: 10000  # Alert when lag exceeds 10k messages

# Compliance tracking
compliance:
  fips_enabled: true
  container_security_scan: true
  vulnerability_threshold: high
  cis_benchmarks: true
  pod_security_standards: "restricted"

# Tags for resource management
tags:
  owning_team: "platform-team"
  cost_center: "engineering"
  project: "clean-platform-implementation"
  compliance: "soc2"
  # Cost optimization tags
  instance_family: "graviton"
  spot_eligible: "${GRAND_CENTRAL_ENVIRONMENT == 'production' ? 'false' : 'true'}"
  autoscale_enabled: "true"
  # Entity tags
  entity.domain: "PLATFORM"
  entity.type: "CLEAN_PLATFORM_SERVICE"
  entity.synthesis: "true"
  # Capacity tags
  capacity.council: "platform"
  capacity.service: "clean-platform"