# Prometheus Helm Chart Values
# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack

global:
  resolve_timeout: 5m

prometheus:
  prometheusSpec:
    replicas: 2
    retention: 30d
    retentionSize: "100GB"
    
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 8Gi
    
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    
    serviceMonitorSelector:
      matchLabels:
        prometheus: platform
    
    podMonitorSelector:
      matchLabels:
        prometheus: platform
    
    ruleSelector:
      matchLabels:
        prometheus: platform
    
    # Additional scrape configs
    additionalScrapeConfigs:
    - job_name: 'platform-services'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['platform-dev', 'platform-staging', 'platform-prod']
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

alertmanager:
  alertmanagerSpec:
    replicas: 2
    retention: 120h
    
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi
    
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  
  config:
    global:
      resolve_timeout: 5m
      smtp_smarthost: 'smtp.example.com:587'
      smtp_from: 'alerts@platform.example.com'
      smtp_auth_username: 'alerts@platform.example.com'
      smtp_auth_password_file: '/etc/alertmanager/secrets/smtp-password'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'default'
      routes:
      - match:
          severity: critical
        receiver: pagerduty
        continue: true
      - match:
          severity: warning
        receiver: slack
        repeat_interval: 4h
    
    receivers:
    - name: 'default'
      email_configs:
      - to: 'platform-team@example.com'
        headers:
          Subject: '[Platform] {{ .GroupLabels.alertname }} - {{ .GroupLabels.severity }}'
    
    - name: 'pagerduty'
      pagerduty_configs:
      - service_key_file: '/etc/alertmanager/secrets/pagerduty-key'
        description: '{{ .GroupLabels.alertname }} - {{ .GroupLabels.severity }}'
    
    - name: 'slack'
      slack_configs:
      - api_url_file: '/etc/alertmanager/secrets/slack-webhook'
        channel: '#platform-alerts'
        title: 'Platform Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'

grafana:
  enabled: true
  
  replicas: 2
  
  persistence:
    enabled: true
    storageClassName: gp3
    size: 10Gi
  
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi
  
  adminPassword: "changeme"  # Should use secret in production
  
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-prometheus:9090
        access: proxy
        isDefault: true
      - name: CloudWatch
        type: cloudwatch
        jsonData:
          authType: default
          defaultRegion: us-east-1
  
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'platform'
        orgId: 1
        folder: 'Platform'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/platform
  
  dashboards:
    platform:
      platform-overview:
        gnetId: 12114
        revision: 1
        datasource: Prometheus
      kubernetes-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      nginx-ingress:
        gnetId: 9614
        revision: 1
        datasource: Prometheus

# Component specific configurations
kubeStateMetrics:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

nodeExporter:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

prometheusOperator:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Additional ServiceMonitors
additionalServiceMonitors:
- name: platform-services
  selector:
    matchLabels:
      monitoring: platform
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics