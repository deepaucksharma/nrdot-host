# Kibana Helm Values
elasticsearchHosts: "https://elasticsearch-master:9200"

# Number of replicas
replicas: 2

# Extra environment variables
extraEnvs:
  - name: ELASTICSEARCH_USERNAME
    value: "kibana_system"
  - name: ELASTICSEARCH_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elastic-credentials
        key: kibana-password
  - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
    value: "/usr/share/kibana/certs/ca.crt"
  - name: SERVER_SSL_ENABLED
    value: "true"
  - name: SERVER_SSL_CERTIFICATE
    value: "/usr/share/kibana/certs/kibana.crt"
  - name: SERVER_SSL_KEY
    value: "/usr/share/kibana/certs/kibana.key"
  - name: XPACK_SECURITY_ENABLED
    value: "true"
  - name: XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY
    valueFrom:
      secretKeyRef:
        name: kibana-encryption-key
        key: key

# Kibana configuration
kibanaConfig:
  kibana.yml: |
    server.name: kibana
    server.host: "0.0.0.0"
    server.ssl.enabled: true
    server.ssl.certificate: /usr/share/kibana/certs/kibana.crt
    server.ssl.key: /usr/share/kibana/certs/kibana.key
    elasticsearch.hosts: ["https://elasticsearch-master:9200"]
    elasticsearch.username: "kibana_system"
    elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
    elasticsearch.ssl.certificateAuthorities: ["/usr/share/kibana/certs/ca.crt"]
    elasticsearch.ssl.verificationMode: full
    xpack.security.enabled: true
    xpack.security.encryptionKey: "${XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}"
    xpack.reporting.encryptionKey: "${XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}"
    xpack.encryptedSavedObjects.encryptionKey: "${XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}"
    # Monitoring
    monitoring.enabled: true
    monitoring.ui.enabled: true
    monitoring.ui.container.elasticsearch.enabled: true
    # Features
    xpack.fleet.enabled: false
    xpack.infra.enabled: true
    xpack.apm.enabled: true
    # Telemetry
    telemetry.enabled: false
    telemetry.optIn: false
    # Custom branding
    server.customResponseHeaders:
      X-Frame-Options: "DENY"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Referrer-Policy: "no-referrer-when-downgrade"

# Resources
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

# Volume for certificates
volumeMounts:
  - name: kibana-certs
    mountPath: /usr/share/kibana/certs
    readOnly: true

volumes:
  - name: kibana-certs
    secret:
      secretName: kibana-certs

# Security context
securityContext:
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 1000

podSecurityContext:
  fsGroup: 1000

# Health checks
healthCheckPath: "/api/status"

# Service
service:
  type: ClusterIP
  port: 5601
  nodePort: null
  annotations: {}

# Ingress
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: kibana.platform.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: kibana-tls
      hosts:
        - kibana.platform.example.com

# Anti-affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - kibana
          topologyKey: kubernetes.io/hostname

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

# Lifecycle hooks
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "sleep 15"]

# Extra containers - sidecar for log shipping
extraContainers:
  - name: log-shipper
    image: fluent/fluent-bit:2.2
    volumeMounts:
      - name: logs
        mountPath: /var/log/kibana
    command:
      - /fluent-bit/bin/fluent-bit
      - -c
      - /fluent-bit/etc/fluent-bit.conf

# Saved objects for initial setup
extraInitContainers:
  - name: setup-saved-objects
    image: curlimages/curl:8.5.0
    command:
      - /bin/sh
      - -c
      - |
        until curl -s -k https://kibana:5601/api/status | grep -q "\"level\":\"available\""; do
          echo "Waiting for Kibana to be ready..."
          sleep 10
        done
        echo "Kibana is ready, importing saved objects..."
        curl -k -X POST https://kibana:5601/api/saved_objects/_import \
          -H "kbn-xsrf: true" \
          -H "Content-Type: multipart/form-data" \
          -F file=@/saved-objects/dashboards.ndjson