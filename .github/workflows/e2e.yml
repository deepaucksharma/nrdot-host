name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  GO_VERSION: '1.21'

jobs:
  e2e-microservices:
    name: E2E Microservices
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build NRDOT collector
      run: |
        cd otelcol-builder
        make build

    - name: Run Microservices E2E test
      run: |
        cd e2e-tests
        make test-microservices

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-microservices-results
        path: e2e-tests/reports/

  e2e-security:
    name: E2E Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build NRDOT collector
      run: |
        cd otelcol-builder
        make build

    - name: Run Security E2E test
      run: |
        cd e2e-tests
        make test-security-compliance

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-security-results
        path: e2e-tests/reports/

  e2e-cardinality:
    name: E2E Cardinality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build NRDOT collector
      run: |
        cd otelcol-builder
        make build

    - name: Run Cardinality E2E test
      run: |
        cd e2e-tests
        make test-high-cardinality

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-cardinality-results
        path: e2e-tests/reports/

  e2e-summary:
    name: E2E Test Summary
    needs: [e2e-microservices, e2e-security, e2e-cardinality]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate summary report
      run: |
        echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for dir in e2e-*-results; do
          if [ -d "$dir" ]; then
            echo "## ${dir%-results}" >> $GITHUB_STEP_SUMMARY
            if [ -f "$dir/summary.json" ]; then
              jq -r '.scenarios | to_entries[] | "- \(.key): \(.value.status)"' "$dir/summary.json" >> $GITHUB_STEP_SUMMARY
            else
              echo "- No results found" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done