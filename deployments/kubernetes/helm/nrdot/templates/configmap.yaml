apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nrdot.fullname" . }}-config
  namespace: {{ include "nrdot.namespace" . }}
  labels:
    {{- include "nrdot.labels" . | nindent 4 }}
data:
  nrdot-config.yaml: |
{{ .Values.configuration.nrdotConfig | indent 4 }}
  {{- if .Values.configuration.otelConfig }}
  otelcol-config.yaml: |
{{ .Values.configuration.otelConfig | indent 4 }}
  {{- else }}
  otelcol-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
            max_recv_msg_size_mib: 32
          http:
            endpoint: 0.0.0.0:4318
            cors:
              allowed_origins:
                - "*"
              allowed_headers:
                - "*"
      prometheus:
        config:
          scrape_configs:
            - job_name: 'nrdot-internal'
              scrape_interval: 30s
              static_configs:
                - targets: ['localhost:8888']
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          load:
          disk:
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
          network:
          paging:
          processes:
      k8s_cluster:
        auth_type: serviceAccount
        node_conditions_to_report: ["Ready", "MemoryPressure", "DiskPressure"]
        allocatable_types_to_report: ["cpu", "memory", "storage"]
        
    processors:
      batch:
        send_batch_size: {{ .Values.collector.config.processors.batch.sendBatchSize }}
        send_batch_max_size: {{ mul .Values.collector.config.processors.batch.sendBatchSize 2 }}
        timeout: {{ .Values.collector.config.processors.batch.timeout }}
      memory_limiter:
        check_interval: {{ .Values.collector.config.processors.memoryLimiter.checkInterval }}
        limit_percentage: {{ .Values.collector.config.processors.memoryLimiter.limitPercentage }}
        spike_limit_percentage: {{ .Values.collector.config.processors.memoryLimiter.spikeLimitPercentage }}
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.statefulset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.node.name
            - k8s.cluster.uid
          annotations:
            - tag_name: app
              key: app.kubernetes.io/name
            - tag_name: component
              key: app.kubernetes.io/component
            - tag_name: version
              key: app.kubernetes.io/version
          labels:
            - tag_name: team
              key: team
            - tag_name: environment
              key: environment
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
      nrcap:
        enabled: true
        limits:
          - metric_name: "*"
            max_cardinality: 100000
            action: drop_new
      nrenrich:
        metadata:
          - source: kubernetes
            target_attributes:
              - k8s.namespace.name
              - k8s.pod.name
              - k8s.deployment.name
      nrsecurity:
        enabled: true
        redaction_patterns:
          - name: credit_card
            pattern: '\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b'
            replacement: "[REDACTED-CC]"
      nrtransform:
        metric_transformations:
          - type: aggregate
            match: "container_*"
            group_by: ["k8s.namespace.name", "k8s.pod.name"]
            interval: 60s
      resource:
        attributes:
          - key: service.name
            value: {{ include "nrdot.fullname" . }}-collector
            action: upsert
          - key: service.namespace
            value: {{ include "nrdot.namespace" . }}
            action: upsert
          - key: deployment.environment
            from_attribute: DEPLOYMENT_ENV
            action: insert
            
    exporters:
      otlp/newrelic:
        endpoint: "${NEW_RELIC_OTLP_ENDPOINT}"
        compression: gzip
        headers:
          api-key: "${NEW_RELIC_LICENSE_KEY}"
        sending_queue:
          enabled: true
          num_consumers: 10
          queue_size: 1000
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          randomization_factor: 0.5
          multiplier: 1.5
          max_interval: 300s
          max_elapsed_time: 900s
      prometheus:
        endpoint: "0.0.0.0:8888"
        namespace: nrdot
        const_labels:
          service: {{ include "nrdot.fullname" . }}
      logging:
        loglevel: {{ .Values.global.logLevel | default "info" }}
        
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
        path: /health
        check_collector_pipeline:
          enabled: true
          interval: 5m
          exporter_failure_threshold: 5
      zpages:
        endpoint: 0.0.0.0:55679
      pprof:
        endpoint: localhost:1888
        
    service:
      telemetry:
        logs:
          level: {{ .Values.global.logLevel | default "info" }}
        metrics:
          level: detailed
          address: 0.0.0.0:8888
      extensions: [health_check, zpages, pprof]
      pipelines:
        metrics:
          receivers: [otlp, prometheus, hostmetrics, k8s_cluster]
          processors: [memory_limiter, k8sattributes, nrcap, nrenrich, nrsecurity, nrtransform, resource, batch]
          exporters: [otlp/newrelic, prometheus, logging]
        traces:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, nrenrich, nrsecurity, resource, batch]
          exporters: [otlp/newrelic, logging]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, nrenrich, nrsecurity, resource, batch]
          exporters: [otlp/newrelic, logging]
  {{- end }}
  supervisor.yaml: |
    mode: kubernetes
    health_check:
      enabled: true
      port: 8081
      path: /health
    restart_policy:
      strategy: {{ .Values.supervisor.config.restartStrategy }}
      max_restarts: {{ .Values.supervisor.config.maxRestarts }}
      initial_delay: 5s
      max_delay: 300s
    managed_processes:
      - name: collector
        enabled: false
      - name: config-engine
        enabled: false
    kubernetes:
      namespace: {{ include "nrdot.namespace" . }}
      service_account: {{ include "nrdot.fullname" . }}-supervisor
      watch_resources:
        - deployments
        - daemonsets
        - statefulsets
      label_selector: "app.kubernetes.io/instance={{ .Release.Name }}"