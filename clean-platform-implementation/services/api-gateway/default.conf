server {
    listen 8080;
    server_name _;

    # Health check endpoint
    location /health {
        limit_req zone=health_limit burst=10 nodelay;
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # Metrics endpoint (for Prometheus)
    location /metrics {
        stub_status on;
        access_log off;
        allow 10.0.0.0/8;
        deny all;
    }

    # Data collection API
    location /api/v1/collect {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://data_collector/collect;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Connection reuse
        proxy_set_header Connection "";
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.json;
    }

    # Data processing API
    location /api/v1/process {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://data_processor/process;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Connection reuse
        proxy_set_header Connection "";
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.json;
    }

    # Query API
    location /api/v1/query {
        limit_req zone=api_limit burst=30 nodelay;
        
        proxy_pass http://data_processor/query;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Connection reuse
        proxy_set_header Connection "";
        
        # Cache headers
        add_header Cache-Control "public, max-age=60";
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.json;
    }

    # WebSocket support for real-time updates
    location /api/v1/stream {
        proxy_pass http://data_processor/stream;
        proxy_http_version 1.1;
        
        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-lived connections
        proxy_connect_timeout 5s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
    }

    # API documentation
    location /api/docs {
        root /usr/share/nginx/html;
        try_files /docs/index.html =404;
    }

    # Error responses
    location = /50x.json {
        internal;
        default_type application/json;
        return 503 '{"error": "Service temporarily unavailable", "code": 503}';
    }

    location = /404.json {
        internal;
        default_type application/json;
        return 404 '{"error": "Resource not found", "code": 404}';
    }

    # Default 404
    location / {
        default_type application/json;
        return 404 '{"error": "Resource not found", "code": 404}';
    }
}