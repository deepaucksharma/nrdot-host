# Certificate management using cert-manager
# Automatically rotates certificates from Let's Encrypt

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: clean-platform-tls
  namespace: clean-platform
spec:
  # Secret that will contain the certificate
  secretName: clean-platform-tls-secret
  
  # Certificate details
  commonName: clean-platform.nr-ops.net
  dnsNames:
  - clean-platform.nr-ops.net
  - "*.clean-platform.nr-ops.net"
  - clean-platform-staging.staging.nr-ops.net
  - clean-platform.us-core-ops.nr-ops.net
  - clean-platform.us-alt-mule.nr-ops.net
  
  # Issuer reference - using Let's Encrypt
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
    group: cert-manager.io
  
  # Certificate rotation
  duration: 2160h  # 90 days
  renewBefore: 720h  # 30 days before expiry
  
  # Key configuration
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  
  # Key usages
  usages:
  - digital signature
  - key encipherment
  - server auth
  - client auth

---
# Certificate for internal service communication
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: clean-platform-internal-tls
  namespace: clean-platform
spec:
  secretName: clean-platform-internal-tls-secret
  
  commonName: clean-platform.svc.cluster.local
  dnsNames:
  - clean-platform.svc.cluster.local
  - "*.clean-platform.svc.cluster.local"
  - data-collector.clean-platform.svc.cluster.local
  - data-processor.clean-platform.svc.cluster.local
  - api-gateway.clean-platform.svc.cluster.local
  
  issuerRef:
    name: internal-ca-issuer
    kind: ClusterIssuer
  
  duration: 8760h  # 1 year
  renewBefore: 2160h  # 90 days before expiry
  
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  
  usages:
  - digital signature
  - key encipherment
  - server auth
  - client auth

---
# ClusterIssuer for Let's Encrypt (usually pre-configured by Container Fabric)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # Production Let's Encrypt server
    server: https://acme-v02.api.letsencrypt.org/directory
    
    # Email for notifications
    email: platform-team@newrelic.com
    
    # Secret to store ACME account key
    privateKeySecretRef:
      name: letsencrypt-prod-account-key
    
    # DNS-01 challenge using NS1
    solvers:
    - dns01:
        webhook:
          groupName: acme.cert-manager.io
          solverName: ns1
          config:
            apiKeySecretRef:
              name: ns1-api-key
              key: api-key

---
# Certificate watcher sidecar for services that need cert reload
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-watcher-config
  namespace: clean-platform
data:
  watcher.sh: |
    #!/bin/bash
    # Certificate watcher script
    # Monitors certificate changes and triggers reload
    
    CERT_PATH="${CERT_PATH:-/etc/tls}"
    RELOAD_SIGNAL="${RELOAD_SIGNAL:-SIGHUP}"
    PROCESS_NAME="${PROCESS_NAME:-nginx}"
    
    echo "Starting certificate watcher..."
    echo "Watching: ${CERT_PATH}"
    echo "Process: ${PROCESS_NAME}"
    echo "Signal: ${RELOAD_SIGNAL}"
    
    # Initial hash
    LAST_HASH=$(find ${CERT_PATH} -type f -exec sha256sum {} \; | sort | sha256sum)
    
    while true; do
        sleep 60
        
        # Calculate current hash
        CURRENT_HASH=$(find ${CERT_PATH} -type f -exec sha256sum {} \; | sort | sha256sum)
        
        if [[ "${LAST_HASH}" != "${CURRENT_HASH}" ]]; then
            echo "Certificate change detected"
            
            # Find process PID
            PID=$(pgrep -f ${PROCESS_NAME})
            
            if [[ -n "${PID}" ]]; then
                echo "Sending ${RELOAD_SIGNAL} to process ${PID}"
                kill -${RELOAD_SIGNAL} ${PID}
                echo "Reload signal sent"
            else
                echo "Process ${PROCESS_NAME} not found"
            fi
            
            LAST_HASH="${CURRENT_HASH}"
        fi
    done