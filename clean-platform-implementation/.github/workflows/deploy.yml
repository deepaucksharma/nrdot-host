name: Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: platform

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=services --cov-report=xml
    
    - name: Run linting
      run: |
        flake8 services/
        black --check services/
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [api-gateway, data-collector, data-processor]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ matrix.service }}:$IMAGE_TAG services/${{ matrix.service }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ matrix.service }}:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ matrix.service }}:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ matrix.service }}:latest

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name platform-dev --region ${{ env.AWS_REGION }}
    
    - name: Deploy to Kubernetes
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        kubectl apply -k infrastructure/kubernetes/overlays/dev
        kubectl set image deployment/api-gateway api-gateway=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/api-gateway:$IMAGE_TAG -n platform-dev
        kubectl set image deployment/data-collector data-collector=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-collector:$IMAGE_TAG -n platform-dev
        kubectl set image deployment/data-processor data-processor=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-processor:$IMAGE_TAG -n platform-dev
        kubectl rollout status deployment/api-gateway -n platform-dev
        kubectl rollout status deployment/data-collector -n platform-dev
        kubectl rollout status deployment/data-processor -n platform-dev

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name platform-staging --region ${{ env.AWS_REGION }}
    
    - name: Deploy to Kubernetes
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        kubectl apply -k infrastructure/kubernetes/overlays/staging
        kubectl set image deployment/api-gateway api-gateway=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/api-gateway:$IMAGE_TAG -n platform-staging
        kubectl set image deployment/data-collector data-collector=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-collector:$IMAGE_TAG -n platform-staging
        kubectl set image deployment/data-processor data-processor=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-processor:$IMAGE_TAG -n platform-staging
        kubectl rollout status deployment/api-gateway -n platform-staging
        kubectl rollout status deployment/data-collector -n platform-staging
        kubectl rollout status deployment/data-processor -n platform-staging

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name platform-prod --region ${{ env.AWS_REGION }}
    
    - name: Deploy to Kubernetes
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        kubectl apply -k infrastructure/kubernetes/overlays/prod
        kubectl set image deployment/api-gateway api-gateway=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/api-gateway:$IMAGE_TAG -n platform-prod
        kubectl set image deployment/data-collector data-collector=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-collector:$IMAGE_TAG -n platform-prod
        kubectl set image deployment/data-processor data-processor=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_PREFIX/data-processor:$IMAGE_TAG -n platform-prod
        kubectl rollout status deployment/api-gateway -n platform-prod
        kubectl rollout status deployment/data-collector -n platform-prod
        kubectl rollout status deployment/data-processor -n platform-prod