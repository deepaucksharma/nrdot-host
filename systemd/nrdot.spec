Name:           nrdot
Version:        1.0.0
Release:        1%{?dist}
Summary:        Network Resource Discovery and Optimization Toolkit

License:        Apache-2.0
URL:            https://github.com/NRDOT/nrdot-host
Source0:        %{name}-%{version}.tar.gz

BuildRequires:  systemd-rpm-macros
BuildRequires:  golang >= 1.19
BuildRequires:  make
BuildRequires:  gcc
BuildRequires:  glibc-devel

Requires:       systemd
Requires:       iproute
Requires:       ethtool
Requires:       kernel >= 4.14
Requires(pre):  shadow-utils
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd

%description
NRDOT (Network Resource Discovery and Optimization Toolkit) is a comprehensive
platform for network monitoring, resource discovery, and performance optimization.
It provides real-time visibility into network infrastructure, automates resource
discovery, and enables intelligent optimization of network resources.

%prep
%setup -q

%build
# Build Go binaries
export GOPATH="${PWD}/_build"
export PATH="${GOPATH}/bin:${PATH}"

# Build each component
go build -ldflags="-s -w -X main.version=%{version}" -o bin/nrdot-collector ./cmd/collector
go build -ldflags="-s -w -X main.version=%{version}" -o bin/nrdot-supervisor ./cmd/supervisor
go build -ldflags="-s -w -X main.version=%{version}" -o bin/nrdot-config-engine ./cmd/config-engine
go build -ldflags="-s -w -X main.version=%{version}" -o bin/nrdot-api-server ./cmd/api-server
go build -ldflags="-s -w -X main.version=%{version}" -o bin/nrdot-privileged-helper ./cmd/privileged-helper

%install
# Create directory structure
install -d -m 0755 %{buildroot}%{_bindir}
install -d -m 0755 %{buildroot}%{_datadir}/%{name}
install -d -m 0755 %{buildroot}%{_sysconfdir}/%{name}
install -d -m 0755 %{buildroot}%{_sysconfdir}/%{name}/certs
install -d -m 0755 %{buildroot}%{_sysconfdir}/%{name}/generated
install -d -m 0755 %{buildroot}%{_localstatedir}/lib/%{name}
install -d -m 0755 %{buildroot}%{_localstatedir}/log/%{name}
install -d -m 0755 %{buildroot}%{_localstatedir}/cache/%{name}
install -d -m 0755 %{buildroot}%{_unitdir}
install -d -m 0755 %{buildroot}%{_sysconfdir}/sysctl.d
install -d -m 0755 %{buildroot}%{_sysconfdir}/security/limits.d
install -d -m 0755 %{buildroot}%{_sysconfdir}/logrotate.d

# Install binaries
install -p -m 0755 bin/* %{buildroot}%{_bindir}/

# Install systemd units
install -p -m 0644 systemd/services/*.service %{buildroot}%{_unitdir}/
install -p -m 0644 systemd/services/*.socket %{buildroot}%{_unitdir}/
install -p -m 0644 systemd/services/*.target %{buildroot}%{_unitdir}/

# Install configuration files
install -p -m 0644 systemd/configs/nrdot.conf %{buildroot}%{_sysconfdir}/%{name}/
install -p -m 0644 systemd/configs/sysctl.d/99-nrdot.conf %{buildroot}%{_sysconfdir}/sysctl.d/
install -p -m 0644 systemd/configs/limits.d/nrdot.conf %{buildroot}%{_sysconfdir}/security/limits.d/

# Install scripts
install -p -m 0755 systemd/scripts/health-check.sh %{buildroot}%{_datadir}/%{name}/

# Install default configs
for service in collector supervisor config-engine api-server privileged-helper database; do
    cat > %{buildroot}%{_sysconfdir}/%{name}/${service}.yaml << EOF
# NRDOT ${service} Configuration
# Generated by RPM package

service:
  name: ${service}
  log_level: info
  
# Add service-specific configuration here
EOF
done

# Install logrotate config
cat > %{buildroot}%{_sysconfdir}/logrotate.d/%{name} << EOF
/var/log/nrdot/*.log {
    daily
    rotate 14
    maxsize 100M
    missingok
    notifempty
    compress
    delaycompress
    sharedscripts
    create 0640 nrdot nrdot
    postrotate
        systemctl reload 'nrdot-*.service' 2>/dev/null || true
    endscript
}
EOF

%pre
# Create user and group
getent group nrdot >/dev/null || groupadd -r nrdot
getent passwd nrdot >/dev/null || \
    useradd -r -g nrdot -d %{_localstatedir}/lib/%{name} -s /sbin/nologin \
    -c "NRDOT Service Account" nrdot
exit 0

%post
# Apply sysctl settings
/usr/sbin/sysctl -p %{_sysconfdir}/sysctl.d/99-nrdot.conf >/dev/null 2>&1 || :

# Generate initial API token if not exists
if [ ! -f %{_sysconfdir}/%{name}/auth-token ]; then
    openssl rand -hex 32 > %{_sysconfdir}/%{name}/auth-token
    chmod 600 %{_sysconfdir}/%{name}/auth-token
    chown nrdot:nrdot %{_sysconfdir}/%{name}/auth-token
fi

# Generate self-signed certificate if not exists
if [ ! -f %{_sysconfdir}/%{name}/certs/server.crt ]; then
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout %{_sysconfdir}/%{name}/certs/server.key \
        -out %{_sysconfdir}/%{name}/certs/server.crt \
        -subj "/C=US/ST=State/L=City/O=NRDOT/CN=localhost" \
        >/dev/null 2>&1
    chmod 600 %{_sysconfdir}/%{name}/certs/server.key
    chmod 644 %{_sysconfdir}/%{name}/certs/server.crt
    chown -R nrdot:nrdot %{_sysconfdir}/%{name}/certs
fi

%systemd_post nrdot.target nrdot-*.service nrdot-*.socket

%preun
%systemd_preun nrdot.target nrdot-*.service nrdot-*.socket

# Backup data on uninstall
if [ $1 -eq 0 ]; then
    BACKUP_DIR="%{_localstatedir}/backups/nrdot/rpm-uninstall-$(date +%%Y%%m%%d-%%H%%M%%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Backup configs
    [ -d %{_sysconfdir}/%{name} ] && \
        tar -czf "$BACKUP_DIR/etc-nrdot.tar.gz" -C / etc/nrdot >/dev/null 2>&1 || :
    
    # Backup data
    [ -d %{_localstatedir}/lib/%{name} ] && \
        tar -czf "$BACKUP_DIR/var-lib-nrdot.tar.gz" -C / var/lib/nrdot >/dev/null 2>&1 || :
fi

%postun
%systemd_postun_with_restart nrdot.target nrdot-*.service

# Remove user on complete uninstall
if [ $1 -eq 0 ]; then
    userdel nrdot >/dev/null 2>&1 || :
    groupdel nrdot >/dev/null 2>&1 || :
fi

%files
%license LICENSE
%doc README.md
%{_bindir}/nrdot-*
%{_unitdir}/nrdot*.service
%{_unitdir}/nrdot*.socket
%{_unitdir}/nrdot*.target
%dir %{_datadir}/%{name}
%{_datadir}/%{name}/health-check.sh
%config(noreplace) %{_sysconfdir}/%{name}/nrdot.conf
%config(noreplace) %{_sysconfdir}/%{name}/*.yaml
%config(noreplace) %{_sysconfdir}/sysctl.d/99-nrdot.conf
%config(noreplace) %{_sysconfdir}/security/limits.d/nrdot.conf
%config(noreplace) %{_sysconfdir}/logrotate.d/%{name}
%dir %attr(0750, nrdot, nrdot) %{_sysconfdir}/%{name}
%dir %attr(0750, nrdot, nrdot) %{_sysconfdir}/%{name}/certs
%dir %attr(0770, nrdot, nrdot) %{_sysconfdir}/%{name}/generated
%dir %attr(0750, nrdot, nrdot) %{_localstatedir}/lib/%{name}
%dir %attr(0750, nrdot, nrdot) %{_localstatedir}/log/%{name}
%dir %attr(0750, nrdot, nrdot) %{_localstatedir}/cache/%{name}

%changelog
* Mon Dec 17 2024 NRDOT Team <nrdot@example.com> - 1.0.0-1
- Initial release of NRDOT
- Network resource discovery and monitoring
- eBPF-based packet capture
- Configuration management engine
- RESTful API server
- Systemd service integration