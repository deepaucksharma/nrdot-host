# Security-Focused NRDOT-HOST Configuration
# Hardened configuration for sensitive data processing

# Server configuration with security hardening
server:
  host: "127.0.0.1"  # Bind to localhost only, use reverse proxy
  port: 8443
  log_level: "info"
  
  # TLS configuration
  tls:
    enabled: true
    cert_file: "/etc/nrdot/certs/server.crt"
    key_file: "/etc/nrdot/certs/server.key"
    min_version: "1.3"
    cipher_suites:
      - "TLS_AES_256_GCM_SHA384"
      - "TLS_CHACHA20_POLY1305_SHA256"
      - "TLS_AES_128_GCM_SHA256"
    client_auth: "require"
    client_ca_file: "/etc/nrdot/certs/ca.crt"
    
  # Security headers
  security_headers:
    strict_transport_security: "max-age=31536000; includeSubDomains"
    x_content_type_options: "nosniff"
    x_frame_options: "DENY"
    x_xss_protection: "1; mode=block"
    content_security_policy: "default-src 'none'"
    
  # Request limits
  max_header_bytes: 8192
  read_timeout: "10s"
  write_timeout: "10s"
  idle_timeout: "30s"

# API security configuration
api:
  enabled: true
  
  # Authentication
  auth:
    type: "oauth2"
    oauth2:
      issuer: "${OAUTH2_ISSUER}"
      audience: "${OAUTH2_AUDIENCE}"
      jwks_url: "${OAUTH2_JWKS_URL}"
      required_scopes: ["nrdot:read", "nrdot:write"]
      
  # Authorization
  authorization:
    enabled: true
    type: "rbac"
    policy_file: "/etc/nrdot/policies/rbac.yaml"
    
  # Rate limiting per user
  rate_limit:
    enabled: true
    type: "token_bucket"
    requests_per_minute: 60
    burst: 10
    by: "user_id"
    
  # Input validation
  validation:
    max_request_size: "1MB"
    allowed_content_types: ["application/json"]
    schema_validation: true
    schema_file: "/etc/nrdot/schemas/api.json"
    
  # CORS (restrictive)
  cors:
    enabled: true
    origins: ["https://app.example.com"]
    methods: ["GET", "POST"]
    headers: ["Authorization", "Content-Type"]
    credentials: true
    max_age: 3600

# Secure data sources
sources:
  - name: "encrypted-kafka"
    type: "kafka"
    config:
      brokers: ["kafka1:9093", "kafka2:9093", "kafka3:9093"]
      topics: ["sensitive-events"]
      consumer_group: "nrdot-secure"
      
      # Kafka security
      security:
        protocol: "SASL_SSL"
        sasl_mechanism: "SCRAM-SHA-512"
        username: "${KAFKA_USERNAME}"
        password: "${KAFKA_PASSWORD}"
        
      # SSL/TLS
      tls:
        ca_file: "/etc/nrdot/certs/kafka-ca.crt"
        cert_file: "/etc/nrdot/certs/kafka-client.crt"
        key_file: "/etc/nrdot/certs/kafka-client.key"
        verify: true
        
      # Message encryption
      encryption:
        enabled: true
        algorithm: "AES-256-GCM"
        key_provider: "kms"
        key_id: "${KMS_KEY_ID}"
        
  - name: "secure-webhook"
    type: "http"
    config:
      endpoint: "/secure/webhook"
      method: "POST"
      
      # Webhook authentication
      auth:
        type: "hmac"
        secret: "${WEBHOOK_SECRET}"
        header: "X-Webhook-Signature"
        algorithm: "SHA256"
        
      # IP whitelist
      ip_whitelist:
        enabled: true
        allowed_ips:
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"

# Security-enhanced processing
processors:
  - name: "sanitizer"
    type: "sanitize"
    config:
      # PII detection and masking
      pii_detection:
        enabled: true
        patterns:
          - name: "ssn"
            regex: '\b\d{3}-\d{2}-\d{4}\b'
            mask: "XXX-XX-XXXX"
          - name: "credit_card"
            regex: '\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b'
            mask: "XXXX-XXXX-XXXX-XXXX"
          - name: "email"
            regex: '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            mask: "****@****.***"
            
      # Field encryption
      field_encryption:
        enabled: true
        fields: ["ssn", "credit_card", "personal_data"]
        algorithm: "AES-256-GCM"
        key_provider: "vault"
        key_path: "secret/data/nrdot/field-keys"
        
  - name: "validator"
    type: "validate"
    config:
      # Schema validation
      schema_validation:
        enabled: true
        strict: true
        schema_registry: "https://schema-registry:8443"
        
      # Data classification
      classification:
        enabled: true
        rules:
          - field: "data_type"
            value: "public"
            level: 1
          - field: "data_type"
            value: "internal"
            level: 2
          - field: "data_type"
            value: "confidential"
            level: 3
          - field: "data_type"
            value: "restricted"
            level: 4
            
  - name: "audit-logger"
    type: "audit"
    config:
      # Audit all data access
      log_reads: true
      log_writes: true
      log_deletes: true
      
      # Include metadata
      metadata:
        - user_id
        - session_id
        - ip_address
        - timestamp
        - action
        - resource
        
      # Tamper-proof logging
      integrity:
        enabled: true
        algorithm: "SHA256"
        include_previous_hash: true

# Secure outputs
outputs:
  - name: "encrypted-s3"
    type: "s3"
    config:
      bucket: "${SECURE_BUCKET}"
      region: "${AWS_REGION}"
      
      # Server-side encryption
      encryption:
        type: "aws:kms"
        kms_key_id: "${KMS_KEY_ID}"
        
      # Access control
      acl: "private"
      bucket_key_enabled: true
      
      # Object lock for compliance
      object_lock:
        enabled: true
        mode: "GOVERNANCE"
        retention_days: 2555  # 7 years
        
      # Versioning
      versioning: true
      
      # Access logging
      access_logging:
        enabled: true
        target_bucket: "${AUDIT_BUCKET}"
        target_prefix: "s3-access-logs/"
        
  - name: "secure-database"
    type: "postgresql"
    config:
      host: "${DB_HOST}"
      port: 5432
      database: "nrdot_secure"
      
      # Connection security
      ssl_mode: "require"
      ssl_cert: "/etc/nrdot/certs/db-client.crt"
      ssl_key: "/etc/nrdot/certs/db-client.key"
      ssl_root_cert: "/etc/nrdot/certs/db-ca.crt"
      
      # Authentication
      username: "${DB_USERNAME}"
      password: "${DB_PASSWORD}"
      
      # Connection pooling with security
      max_open_conns: 10
      max_idle_conns: 5
      conn_max_lifetime: "5m"
      
      # Row-level security
      rls_enabled: true
      rls_policy: "user_id = current_user_id()"

# Security monitoring
monitoring:
  # Security metrics
  security_metrics:
    enabled: true
    metrics:
      - authentication_attempts
      - authorization_failures
      - invalid_requests
      - pii_detections
      - encryption_operations
      
  # Intrusion detection
  ids:
    enabled: true
    rules:
      - name: "brute_force"
        condition: "auth_failures > 5 in 1m"
        action: "block_ip"
      - name: "data_exfiltration"
        condition: "data_volume > 1GB in 10m"
        action: "alert"
      - name: "suspicious_pattern"
        condition: "unusual_access_pattern"
        action: "log"
        
  # SIEM integration
  siem:
    enabled: true
    type: "splunk"
    endpoint: "${SIEM_ENDPOINT}"
    token: "${SIEM_TOKEN}"
    index: "nrdot_security"

# Access control
access_control:
  # Role-based access
  rbac:
    enabled: true
    roles:
      - name: "admin"
        permissions: ["read", "write", "delete", "admin"]
        data_classifications: [1, 2, 3, 4]
      - name: "operator"
        permissions: ["read", "write"]
        data_classifications: [1, 2, 3]
      - name: "viewer"
        permissions: ["read"]
        data_classifications: [1, 2]
        
  # Attribute-based access
  abac:
    enabled: true
    policies:
      - name: "time_based"
        condition: "time.hour >= 8 AND time.hour <= 18"
      - name: "location_based"
        condition: "user.location IN ['US', 'EU']"
      - name: "clearance_based"
        condition: "user.clearance_level >= data.classification_level"

# Data governance
governance:
  # Data retention
  retention:
    default_days: 90
    by_classification:
      public: 365
      internal: 180
      confidential: 90
      restricted: 30
      
  # Data lineage
  lineage:
    enabled: true
    track_transformations: true
    track_access: true
    
  # Compliance
  compliance:
    frameworks: ["SOC2", "HIPAA", "GDPR", "PCI-DSS"]
    
    # GDPR specific
    gdpr:
      enabled: true
      data_subject_requests:
        enabled: true
        endpoint: "/privacy/requests"
      consent_management: true
      right_to_be_forgotten: true
      
    # HIPAA specific
    hipaa:
      enabled: true
      phi_encryption: "required"
      audit_controls: "strict"
      access_controls: "strict"

# Secrets management
secrets:
  # HashiCorp Vault integration
  provider: "vault"
  vault:
    address: "${VAULT_ADDR}"
    token: "${VAULT_TOKEN}"
    namespace: "nrdot"
    
    # Auto-renewal
    renew_token: true
    renew_interval: "1h"
    
    # Secret paths
    paths:
      database: "database/creds/nrdot"
      api_keys: "secret/data/nrdot/api-keys"
      encryption_keys: "transit/keys/nrdot"
      
  # Secret rotation
  rotation:
    enabled: true
    interval: "30d"
    grace_period: "7d"

# Hardening options
hardening:
  # Disable unnecessary features
  disable_debug_endpoints: true
  disable_profiling: true
  disable_metrics_details: true
  
  # Runtime security
  runtime:
    read_only_root_fs: true
    no_new_privileges: true
    drop_capabilities: ["ALL"]
    seccomp_profile: "runtime/default"
    
  # Resource limits
  limits:
    max_connections: 1000
    max_requests_per_connection: 100
    max_request_size: "1MB"
    max_response_size: "10MB"