# NRDOT-HOST v3.0 Makefile with all features

# Variables
BINARY_NAME := nrdot-host
HELPER_NAME := nrdot-helper
VERSION := 3.0.0-dev
COMMIT := $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_DATE := $(shell date -u +%Y%m%d.%H%M%S)
LDFLAGS := -X main.version=$(VERSION) -X main.commit=$(COMMIT) -X main.buildDate=$(BUILD_DATE)

# Go parameters
GOCMD := go
GOBUILD := $(GOCMD) build
GOCLEAN := $(GOCMD) clean
GOTEST := $(GOCMD) test
GOGET := $(GOCMD) get
GOMOD := $(GOCMD) mod
GOFMT := gofmt
GOLINT := golangci-lint

# Directories
CMD_DIR := cmd
BIN_DIR := bin
DIST_DIR := dist
TEST_DIR := tests

# All source files
GO_FILES := $(shell find . -name '*.go' -not -path './vendor/*' -not -path './tests/*')

# Default target
.PHONY: all
all: clean deps lint test build

# Dependencies
.PHONY: deps
deps:
	@echo "📦 Downloading dependencies..."
	$(GOMOD) download
	$(GOMOD) tidy

# Build targets
.PHONY: build
build: build-host build-helper build-collector

.PHONY: build-host
build-host:
	@echo "🔨 Building $(BINARY_NAME)..."
	@mkdir -p $(BIN_DIR)
	$(GOBUILD) -ldflags "$(LDFLAGS)" -o $(BIN_DIR)/$(BINARY_NAME) $(CMD_DIR)/nrdot-host/main_v2.go

.PHONY: build-helper
build-helper:
	@echo "🔨 Building $(HELPER_NAME)..."
	@mkdir -p $(BIN_DIR)
	$(GOBUILD) -o $(BIN_DIR)/$(HELPER_NAME) $(CMD_DIR)/nrdot-helper/main.go
	@echo "⚠️  Remember to set appropriate permissions: sudo chown root:root $(BIN_DIR)/$(HELPER_NAME) && sudo chmod 4755 $(BIN_DIR)/$(HELPER_NAME)"

.PHONY: build-collector
build-collector:
	@echo "🔨 Building OpenTelemetry Collector..."
	@mkdir -p $(BIN_DIR)
	cd cmd/otelcol-nrdot && $(GOBUILD) -o ../../$(BIN_DIR)/otelcol-nrdot .

# Install
.PHONY: install
install: build
	@echo "📥 Installing NRDOT-HOST..."
	sudo cp $(BIN_DIR)/$(BINARY_NAME) /usr/local/bin/
	sudo cp $(BIN_DIR)/$(HELPER_NAME) /usr/local/bin/
	sudo chown root:root /usr/local/bin/$(HELPER_NAME)
	sudo chmod 4755 /usr/local/bin/$(HELPER_NAME)
	sudo mkdir -p /etc/nrdot /var/lib/nrdot /var/log/nrdot
	@echo "✅ Installation complete"

# Testing
.PHONY: test
test: test-unit test-integration

.PHONY: test-unit
test-unit:
	@echo "🧪 Running unit tests..."
	$(GOTEST) -v -race -coverprofile=coverage.out ./nrdot-*/... 

.PHONY: test-integration
test-integration:
	@echo "🧪 Running integration tests..."
	$(GOTEST) -v -tags=integration ./tests/integration/...

.PHONY: test-e2e
test-e2e: build
	@echo "🧪 Running end-to-end tests..."
	cd tests/integration && $(GOTEST) -v -run TestEndToEnd

# Code quality
.PHONY: lint
lint:
	@echo "🔍 Running linters..."
	$(GOLINT) run ./...

.PHONY: fmt
fmt:
	@echo "✨ Formatting code..."
	$(GOFMT) -w $(GO_FILES)

.PHONY: vet
vet:
	@echo "🔍 Running go vet..."
	$(GOCMD) vet ./...

# Development helpers
.PHONY: run
run: build
	@echo "🚀 Running NRDOT-HOST..."
	$(BIN_DIR)/$(BINARY_NAME) run --log-level=debug

.PHONY: run-discover
run-discover: build
	@echo "🔍 Running service discovery..."
	$(BIN_DIR)/$(BINARY_NAME) discover

.PHONY: run-processes
run-processes: build
	@echo "📊 Showing top processes..."
	$(BIN_DIR)/$(BINARY_NAME) processes --top=20

# Package building
.PHONY: package
package: package-deb package-rpm package-tar

.PHONY: package-deb
package-deb: build
	@echo "📦 Building Debian package..."
	@mkdir -p $(DIST_DIR)/deb/usr/local/bin
	@mkdir -p $(DIST_DIR)/deb/etc/nrdot
	@mkdir -p $(DIST_DIR)/deb/lib/systemd/system
	@cp $(BIN_DIR)/$(BINARY_NAME) $(DIST_DIR)/deb/usr/local/bin/
	@cp $(BIN_DIR)/$(HELPER_NAME) $(DIST_DIR)/deb/usr/local/bin/
	@cp examples/config/basic.yaml $(DIST_DIR)/deb/etc/nrdot/config.yaml.example
	@cp scripts/systemd/nrdot-host.service $(DIST_DIR)/deb/lib/systemd/system/
	# Add DEBIAN control files here
	@echo "✅ Debian package created in $(DIST_DIR)/deb"

.PHONY: package-rpm
package-rpm: build
	@echo "📦 Building RPM package..."
	# RPM packaging commands here
	@echo "✅ RPM package created in $(DIST_DIR)/rpm"

.PHONY: package-tar
package-tar: build
	@echo "📦 Creating tar archive..."
	@mkdir -p $(DIST_DIR)
	tar -czf $(DIST_DIR)/nrdot-host-$(VERSION)-linux-amd64.tar.gz \
		-C $(BIN_DIR) $(BINARY_NAME) $(HELPER_NAME) \
		-C .. README.md LICENSE docs/
	@echo "✅ Archive created: $(DIST_DIR)/nrdot-host-$(VERSION)-linux-amd64.tar.gz"

# Docker
.PHONY: docker-build
docker-build:
	@echo "🐳 Building Docker image..."
	docker build -t nrdot-host:$(VERSION) -t nrdot-host:latest .

.PHONY: docker-run
docker-run:
	@echo "🐳 Running Docker container..."
	docker run -d --name nrdot-host \
		--network host \
		--pid host \
		--privileged \
		-v /etc/nrdot:/etc/nrdot \
		-v /proc:/host/proc:ro \
		-v /sys:/host/sys:ro \
		-e NEW_RELIC_LICENSE_KEY=$(NEW_RELIC_LICENSE_KEY) \
		nrdot-host:latest

# Documentation
.PHONY: docs
docs:
	@echo "📚 Generating documentation..."
	godoc -http=:6060 &
	@echo "Documentation server running at http://localhost:6060"

# Clean
.PHONY: clean
clean:
	@echo "🧹 Cleaning..."
	$(GOCLEAN)
	rm -rf $(BIN_DIR) $(DIST_DIR) coverage.out
	docker rm -f nrdot-host 2>/dev/null || true

# Help
.PHONY: help
help:
	@echo "NRDOT-HOST Makefile"
	@echo "==================="
	@echo ""
	@echo "Usage: make [target]"
	@echo ""
	@echo "Main targets:"
	@echo "  all          - Clean, download deps, lint, test, and build"
	@echo "  build        - Build all binaries"
	@echo "  install      - Install binaries to system"
	@echo "  test         - Run all tests"
	@echo "  clean        - Clean build artifacts"
	@echo ""
	@echo "Build targets:"
	@echo "  build-host   - Build main NRDOT-HOST binary"
	@echo "  build-helper - Build privileged helper"
	@echo "  build-collector - Build OpenTelemetry collector"
	@echo ""
	@echo "Testing targets:"
	@echo "  test-unit    - Run unit tests"
	@echo "  test-integration - Run integration tests"
	@echo "  test-e2e     - Run end-to-end tests"
	@echo ""
	@echo "Development targets:"
	@echo "  run          - Run NRDOT-HOST locally"
	@echo "  run-discover - Run service discovery"
	@echo "  run-processes - Show top processes"
	@echo "  lint         - Run linters"
	@echo "  fmt          - Format code"
	@echo ""
	@echo "Package targets:"
	@echo "  package      - Build all packages"
	@echo "  package-deb  - Build Debian package"
	@echo "  package-rpm  - Build RPM package"
	@echo "  package-tar  - Build tar archive"
	@echo ""
	@echo "Docker targets:"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run Docker container"

# Version information
.PHONY: version
version:
	@echo "NRDOT-HOST $(VERSION)"
	@echo "Commit: $(COMMIT)"
	@echo "Build Date: $(BUILD_DATE)"